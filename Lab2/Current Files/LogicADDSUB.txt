`timescale 1ns / 1ps
module LogicADDSUB(
    input [2:0] OP,
    input [15:0] A,
    input [15:0] B,
    input cin,
    output cout,
    output [15:0] OUT
    );
    
    wire wOP;
    wire check;
    wire [15:0]twosCompB;
    wire [15:0]wAdded;
    wire wACout;
    wire [15:0]wSubtracted;
    wire wSCout;
    wire [15:0]carry;
    wire wCout;
    
    //Check if the opperator is 010 or 011 for ADD or SUB
    not N1as(wOP, OP[2]);
    CheckOP COPas (wOP, OP[1], A, B, wA, wB);
    
//If OP[0] is 0, ADD; if OP[0] is 1, SUB
    
    //2's complement for subtraction
    //and ANDas (check, wOP, OP[1]);
    //TwosComp TCas(check,OP,B,twosCompB);
    not N2as (twosCompB, B);
    Adder_2comp TCas(cin, {carry[14:0], OP[1]}, B, twosCompB,wCout);
    
    //Add
    Adder_2comp SUBas(cin,A,twosCompB,wSubtracted,wSCout);
    Adder_2comp ADDas(cin,A,B,wAdded,wACout);
    
    //2_1Mux
    MUX2_1 MUX1oa(OP[0],wAdded,wSubtracted,OUT);
    MUX2_1 MUX2oa(OP[0],wACout,wSCout,cout);
endmodule